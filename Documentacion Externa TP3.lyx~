#LyX 2.2 created this file. For more info see http://www.lyx.org/
\lyxformat 508
\begin_document
\begin_header
\save_transient_properties true
\origin unavailable
\textclass article
\begin_preamble
\usepackage{palatino}
\usepackage{hyperref}
\end_preamble
\use_default_options true
\maintain_unincluded_children false
\language spanish
\language_package default
\inputencoding auto
\fontencoding global
\font_roman "default" "default"
\font_sans "default" "default"
\font_typewriter "default" "default"
\font_math "auto" "auto"
\font_default_family default
\use_non_tex_fonts false
\font_sc false
\font_osf false
\font_sf_scale 100 100
\font_tt_scale 100 100
\graphics default
\default_output_format default
\output_sync 0
\bibtex_command default
\index_command default
\paperfontsize default
\spacing single
\use_hyperref false
\papersize letterpaper
\use_geometry true
\use_package amsmath 1
\use_package amssymb 1
\use_package cancel 1
\use_package esint 1
\use_package mathdots 1
\use_package mathtools 1
\use_package mhchem 1
\use_package stackrel 1
\use_package stmaryrd 1
\use_package undertilde 1
\cite_engine basic
\cite_engine_type default
\biblio_style plain
\use_bibtopic false
\use_indices false
\paperorientation portrait
\suppress_date false
\justification true
\use_refstyle 1
\index Index
\shortcut idx
\color #008000
\end_index
\leftmargin 2.5cm
\topmargin 3cm
\rightmargin 2.5cm
\bottommargin 3cm
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\paragraph_indentation default
\quotes_language french
\papercolumns 1
\papersides 1
\paperpagestyle default
\tracking_changes false
\output_changes false
\html_math_output 0
\html_css_as_file 0
\html_be_strict false
\end_header

\begin_body

\begin_layout Standard
\paragraph_spacing double
\align center

\size larger
\lang english
Instituto Tecnológico de Costa Rica
\size default
 
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\lang english
Área Académica de Ingeniería en Computacion 
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\lang english
IC1803 - Taller de Programación
\end_layout

\begin_layout Standard
\align center

\lang english
Tarea Programada 3: Algoritmo K-Medias
\end_layout

\begin_layout Standard
\align center

\lang english
Profesor: Saúl Calderón Ramírez 
\end_layout

\begin_layout Standard
\paragraph_spacing double
\align center

\lang english
\begin_inset VSpace bigskip
\end_inset


\end_layout

\begin_layout Standard
\align center

\lang english
Estudiantes: 
\end_layout

\begin_layout Standard
\align center

\lang english
Gloriana Fernández Quesada 
\end_layout

\begin_layout Standard
\align center

\lang english
Dereck Benavides Escalante
\end_layout

\begin_layout Standard
\align center

\lang english
\begin_inset VSpace bigskip
\end_inset


\begin_inset VSpace vfill
\end_inset


\end_layout

\begin_layout Standard
\align center

\lang english
Segundo semestre 2017
\begin_inset Newpage newpage
\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset CommandInset toc
LatexCommand tableofcontents

\end_inset


\end_layout

\begin_layout Standard

\lang english
\begin_inset Newpage pagebreak
\end_inset


\end_layout

\begin_layout Section
Introducción
\end_layout

\begin_layout Standard
La presente Tarea Programada trata sobre el algoritmo K-Medias, que podría
 definirse como un método de agrupamiento de datos, en el cual se inicializa
 un centro aleatorio o centroide cercano a un clúster de datos de tamaño
 variable y por cada iteración, el centroide se relaciona con sus puntos
 más cercanos y los promedia, para así obtener su nuevo valor.
 
\end_layout

\begin_layout Standard
El término "k-medias" fue utilizado por primera vez por James MacQueen en
 1967, aunque la idea se remonta a Hugo Steinhaus en 1957.
 El algoritmo estándar fue propuesto por primera vez por Stuart Lloyd en
 1957 como una técnica para modulación por impulsos codificados, aunque
 no se publicó fuera de los laboratorios Bell hasta 1982.
 En 1965, E.
 W.
 Forgy publicó esencialmente el mismo método, por lo que a veces también
 se le nombra como Lloyd-Forgy.
 Una versión más eficiente fue propuesta y publicada en Fortran por Hartigan
 y Wong en 1975/1979.
 
\end_layout

\begin_layout Standard
Algunos de los usos de este algoritmo en la actualidad se pueden mencionar
 muchas áreas como segmentación de mercados, visión por computadoras, geoestadís
tica, astronomía y minería de datos en agricultura.
 
\end_layout

\begin_layout Standard
Para la actual Tarea Programada, se creó una interfaz gráfica que permite
 al usuario ingresar los datos de su interés y se muestra una ventana con
 su resultado final.
 
\end_layout

\begin_layout Section
Análisis del problema
\end_layout

\begin_layout Standard
Para la elaboración de este algoritmo, se plantea la estructura de 5 Clases
 compuestas por: Amontonador, GeneradorDatos, Interfaz, Graficador y Controlador.
 En el caso de la clase Controlador va a ser el mediador entre la interfaz
 y la lógica del algoritmo, lo cual permite una mejor modularizacion del
 código y no sobrecarga cada clase con muchas funciones.
 
\end_layout

\begin_layout Standard
Ahora, el flujo de ejecución del algoritmo K-Medias sigue el siguiente patrón:
\end_layout

\begin_layout Itemize
Inicialización aleatoria de datos 
\end_layout

\begin_layout Itemize
Inicialización aleatoria de los centroides 
\end_layout

\begin_layout Itemize
Fase de etiquetamiento de muestras 
\end_layout

\begin_layout Itemize
Fase de recalculo de centroides 
\end_layout

\begin_layout Standard
De acuerdo con el número de iteraciones que defina el usuario se repetirán
 los pasos de etiquetamiento y recalculo de centroides.
 Cabe destacar que entre más itere el algoritmo más preciso se vuelve el
 cálculo de los centroides finales, hasta que es evidente que el centroide
 está totalmente centrado.
 Como los datos se inicializan aleatoriamente, no es posible determinar
 un número exacto de iteraciones para que el centroide llegue a un clímax
 y no se mueva más.
 
\end_layout

\begin_layout Standard
Luego, otro problema a solucionar es la interfaz de usuario escrita con
 el Paradigma Orientado a Objetos.
 La interfaz de usuario debe recibir: 
\end_layout

\begin_layout Itemize
Número de datos 
\end_layout

\begin_layout Itemize
Número de iteraciones 
\end_layout

\begin_layout Itemize
Número de clases (son 2 según la especificación) 
\end_layout

\begin_layout Itemize
Centroide en X, Clase 1
\end_layout

\begin_layout Itemize
Centroide en Y, Clase 1 
\end_layout

\begin_layout Itemize
Centroide en X, Clase 2
\end_layout

\begin_layout Itemize
Centroide en Y, Clase 2 
\end_layout

\begin_layout Itemize
Desviación en X , Clase 1 
\end_layout

\begin_layout Itemize
Desviación en Y , Clase 1 
\end_layout

\begin_layout Itemize
Desviación en X , Clase 2 
\end_layout

\begin_layout Itemize
Desviación en Y , Clase 2 
\end_layout

\begin_layout Standard
Al introducir los anteriores parámetros, el programa debe desplegar una
 ventana mostrando el resultado deseado.
 Debido a que los datos son generados aleatoriamente, no existe una prueba
 concreta de la correctitud del programa.
 Sin embargo, se sabe que los resultados son correctos si los centroides
 quedan bien alineados después de varias iteraciones.
\end_layout

\begin_layout Standard
Como puntos extra, decidimos guardar el paso a paso de el corrimiento de
 los centroides en una carpeta con la fecha y la hora, la cual se ubica
 en el mismo folder donde se encuentra el programa.
 
\end_layout

\begin_layout Section
Diseño de la solución
\end_layout

\begin_layout Standard
Primeramente, se diseñó la clase Graficador, la cual no contiene atributos
 y su único método es graficarPuntos, el cual permite visualizar los puntos
 aleatorios en una gráfica para ver el comportamiento del algoritmo K-medias.Cabe
 destacar que se utiliza la libreria matplotlib en esta parte.
 El diagrama de esta clase es el siguiente:
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clase-Graficador"

\end_inset


\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename clase graficador.PNG

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase Graficador
\begin_inset CommandInset label
LatexCommand label
name "fig:Clase-Graficador"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Luego, se diseño la clase GeneradorDatos, la cual nos permite poner a trabajar
 nuestro algoritmo con datos aleatorios , esta clase no tiene atributos
 y contiene los metodos:
\end_layout

\begin_layout Itemize
generadorDatosGauss2D: se encarga de generar los datos aleatorios para el
 funcionamiento del algoritmo 
\end_layout

\begin_layout Itemize
generarPuntoAleatorio: produce un par ordenado aleatorio , necesario para
 la inicialización de los centroides.
\end_layout

\begin_layout Standard
Se utilizo la libreria Numpy para la creación aleatoria de puntos , el diagrama
 de clase es el siguiente
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Clase-Generador-Datos"

\end_inset

:
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\begin_inset Graphics
	filename clase generador datos.png

\end_inset


\begin_inset Caption Standard

\begin_layout Plain Layout
Clase Generador Datos
\begin_inset CommandInset label
LatexCommand label
name "fig:Clase-Generador-Datos"

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Implementación y pruebas
\end_layout

\begin_layout Section
Conclusiones y recomendaciones
\end_layout

\begin_layout Standard

\end_layout

\begin_layout Section
Bibliografía
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "referencias"
options "plain"

\end_inset


\end_layout

\end_body
\end_document
